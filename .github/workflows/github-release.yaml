name: Create and Publish Tagged Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the release"
        required: true

jobs:
  release:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-latest
    env:
      COSIGN_EXPERIMENTAL: "true"
      COSIGN_YES: "true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0
      - name: Check install!
        run: cosign version

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: "./"
          output-file: ./sbom-${{ github.event.inputs.tag }}.spdx.json
          format: "spdx"

      - name: Create Tag
        run: git tag ${{ github.event.inputs.tag }}

      - name: Push Tag
        run: git push origin ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: gh release create ${{ github.event.inputs.tag }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SBOM as Release Asset
        run: gh release upload ${{ github.event.inputs.tag }} *.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: list content
        run: ls -l

      - name: Update Semantic Tag
        run: |
          TAG=${{ github.event.inputs.tag }}
          SEMANTIC_TAG=$(echo $TAG | grep -oP '^v\d+')
          git tag -f $SEMANTIC_TAG $TAG
          git push -f origin $SEMANTIC_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Provenance File
        run: |
          echo "Generating provenance.json"
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          TAG_NAME="${{ github.event.inputs.tag }}"
          COMMIT_SHA=$(git show-ref -s $TAG_NAME)
          TAG_DETAILS=$(gh api repos/$OWNER/$REPO/git/commits/$COMMIT_SHA | jq '.')
          jq -n --arg repository "${{ github.repository }}" \
               --arg workflow "${{ github.workflow }}" \
               --arg run_id "${{ github.run_id }}" \
               --arg run_attempt "${{ github.run_attempt }}" \
               --arg tag "$TAG_NAME" \
               --arg commit_sha "$COMMIT_SHA" \
               --argjson tag_details "$TAG_DETAILS" \
               '{"repository": $repository, "workflow": $workflow, "run_id": $run_id, "run_attempt": $run_attempt, "tag": $tag, "commit_sha": $commit_sha, "tag_details": $tag_details}' > provenance.json
          cat provenance.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Provenance as Release Asset
        run: gh release upload ${{ github.event.inputs.tag }} provenance.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate hashes
        shell: bash
        id: hash
        run: |
          echo "Generating hashes for artifacts..."
          echo "Hash for sbom-${{ github.event.inputs.tag }}.spdx.json:"
          HASH_SBOM=$(sha256sum sbom-${{ github.event.inputs.tag }}.spdx.json)
          echo $HASH_SBOM

          echo "Hash for provenance.json:"
          HASH_PROVENANCE=$(sha256sum provenance.json)
          echo $HASH_PROVENANCE

          # Combine the hashes and encode them to base64
          HASHES_BASE64=$(echo "$HASH_SBOM $HASH_PROVENANCE" | base64 -w0)
          echo "Combined Base64 Encoded Hashes: $HASHES_BASE64"

          # Set the hashes output
          echo "hashes=$HASHES_BASE64" >> "$GITHUB_OUTPUT"

  # This step calls the generic workflow to generate provenance.
  provenance:
    needs: [release]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.release.outputs.hashes }}"
      # Upload provenance to a new release
      upload-assets: true
      upload-tag-name: "${{ github.event.inputs.tag }}"
